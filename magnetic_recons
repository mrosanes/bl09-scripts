#!/usr/bin/env python
##/homelocal/opbl09/miniconda2/bin/python

## Use 'conda activate' from the command line, before calling this script

"""
(C) Copyright 2019 Marc Rosanes - ALBA Synchrotron
The program is distributed under the terms of the 
GNU General Public License (or the Lesser GPL).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import time
import datetime 
import argparse
from argparse import RawTextHelpFormatter
import numpy as np

import tomopy
import dxchange
import matplotlib.pyplot as plt


def str2bool(v):
    return v.lower() in ("yes", "true", "t", "1")

              
xp_file = ("/beamlines/bl09/controls/sferrer/MAGNETISM_DATA/" +
          "phantom_00013_heterostructure/Xt_dPos_m90-901deg_Tomo.hdf5")
xn_file = ("/beamlines/bl09/controls/sferrer/MAGNETISM_DATA/" +
          "phantom_00013_heterostructure/Xt_dNeg_m90-901deg_Tomo.hdf5")     
x_angles = ("/beamlines/bl09/controls/sferrer/MAGNETISM_DATA/" +
              "phantom_00013_heterostructure/FP_m90-90_1deg.txt")
yp_file = ("/beamlines/bl09/controls/sferrer/MAGNETISM_DATA/" +
          "phantom_00013_heterostructure/Yt_dPos_m90-901deg_Tomo.hdf5")
yn_file = ("/beamlines/bl09/controls/sferrer/MAGNETISM_DATA/" +
          "phantom_00013_heterostructure/Yt_dNeg_m90-901deg_Tomo.hdf5") 
y_angles = ("/beamlines/bl09/controls/sferrer/MAGNETISM_DATA/" +
              "phantom_00013_heterostructure/FP_m90-90_1deg.txt")

description = ("Magnetic reconstruction using Tomopy")
parser = argparse.ArgumentParser(description=description,
                                 formatter_class=RawTextHelpFormatter)
parser.register('type', 'bool', str2bool)

# Arguments for deconvolution
parser.add_argument('-xp', '--xpfile', type=str, default=xp_file,
                    help="x positive circular polarization projections stack\n"
                          + " (default: simulated heterostructure xn file)")
parser.add_argument('-xn', '--xnfile', type=str, default=xn_file,
                    help="x negative circular polarization projections stack\n"
                          + " (default: simulated heterostructure xp file)")
parser.add_argument('-xa', '--xangles', type=str, default=x_angles,
                    help="tilt angles for x stack")
parser.add_argument('-yp', '--ypfile', type=str, default=yp_file,
                    help="y positive circular polarization projections stack\n"
                          + " (default: simulated heterostructure xn file)")
parser.add_argument('-yn', '--ynfile', type=str, default=yn_file,
                    help="y negative circular polarization projections stack\n"
                          + " (default: simulated heterostructure xn file)")                       
parser.add_argument('-ya', '--yangles', type=str, default=y_angles,
                    help="tilt angles for x stack")
parser.add_argument('-i', '--iterations', type=int, default=3, 
                    help='Iterations for the SIRT reconstruction')
# Default shall be False in order to work with BL09-Mistral TXM Data
# Change to default False when finishing tests
parser.add_argument('-t', '--transpose', type='bool', default='True', 
                    help='Alignment of projections along' 
                         + ' the stack (default=True)')

args = parser.parse_args()
start_time = time.time()

print("\nReading input stacks")
xp = dxchange.read_hdf5(args.xpfile, dataset='/Tomo/data').astype('float32')
xn = dxchange.read_hdf5(args.xnfile, dataset='/Tomo/data').astype('float32')
yp = dxchange.read_hdf5(args.ypfile, dataset='/Tomo/data').astype('float32')
yn = dxchange.read_hdf5(args.ynfile, dataset='/Tomo/data').astype('float32')

print("\nReading angles")
x_ang = np.loadtxt(args.xangles)                                           
x_ang = np.pi/180. * x_ang                                                 
x_ang = -np.array(np.pi/2.+x_ang, dtype='float32')
y_ang = np.loadtxt(args.yangles)                                           
y_ang = np.pi/180. * y_ang                                              
y_ang = -np.array(np.pi/2.+y_ang, dtype='float32')

print("\nComputing difference stacks")
prj1 = xp-xn                                                                           
prj2 = yp-yn 

# Transpose one of the stacks in order to rotate it at 90degrees.
# Use openCV to rotate to any arbitrary number.

# Tomopy wants the two stacks in the same axis: as the TXM will do. 
# TODO: If the axis rotated between the two stacks (around Z) of the sample in 
# the TXM is less or more of 90degrees, the difference of rotation angle shall 
# be added/subtracted to the second stack. Maybe, a rotation of 180degrees
# will have to be applied as a  preprocessing in the images; this will depend 
# on how we have mounted the sample once rotated in the TXM to acquire the 
# second stack.

# In case of example images, we transpose, because the stacks are already 
# rotated by 90degrees. In case of TXM stacks the transposing should not be 
# done, as both stacks will be oriented following the same axis; and it is
# in this way, that tomopy takes the input stacks in the two different
# light polarizations.
print("\nTransposing one of the stacks if needed: tomopy requires to input"
       + " all the stacks following the same rotation axis direction")
if args.transpose:
    for m in range(prj2.shape[0]):                                                         
        prj2[m] = np.transpose(prj2[m]).copy() 

print("\nDownsample: useful to diminish processing time"
      + " at the cost of losing reconstruction resolution")
prj1 = tomopy.downsample(prj1, level=2, axis=2).copy()
prj1 = tomopy.downsample(prj1, level=2, axis=1).copy()
prj2 = tomopy.downsample(prj2, level=2, axis=2).copy()
prj2 = tomopy.downsample(prj2, level=2, axis=1).copy()

print("\nInput stacks shape")
print(np.shape(prj1))                                                  
print(np.shape(prj2))


print("\nReconstructing...")
rec1, rec2, rec3 = tomopy.vector2(prj1, prj2, x_ang, y_ang, 
                                  axis1=1, axis2=2, num_iter=args.iterations)
#rec1, rec2, rec3 = tomopy.vector2(prj1, prj2, ang, ang, 
#                                  axis1=1, axis2=2, num_iter=100)
print("\nReconstruction has been finished")

# Write into tiff. I found a bug in writting to hdf5 using dxchange, 
# but probably I can use h5py to store in hdf5.
time.sleep(2)
print("\nStoring x,y,z magnetic components reconstructed stacks(tiff format)")
dxchange.write_tiff(rec1, fname="rec1", overwrite=True)
dxchange.write_tiff(rec2, fname="rec2", overwrite=True)
dxchange.write_tiff(rec3, fname="rec3", overwrite=True)


#"""
fig = plt.figure(figsize=(9, 7))                                       
ax1 = fig.add_subplot(1, 3, 1)                                         
ax1.imshow(rec1[28,:,:])                                               
ax2 = fig.add_subplot(1, 3, 2)                                         
ax2.imshow(rec2[28,:,:])                      
ax3 = fig.add_subplot(1, 3, 3)
ax3.imshow(rec3[28,:,:])
#"""

end_time = time.time()
elapsed_time = end_time - start_time


print("\nElapsed time:")
sec = datetime.timedelta(seconds=elapsed_time)
print(str(sec))

#"""
print("\nShowing figures\n")
plt.show()
#"""

