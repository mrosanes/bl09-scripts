#!/usr/bin/env python
##/homelocal/opbl09/miniconda2/bin/python

## Use 'conda activate' from the command line, before calling this script

"""
(C) Copyright 2019 Marc Rosanes & Aurelio Hierro - ALBA Synchrotron
The program is distributed under the terms of the 
GNU General Public License (or the Lesser GPL).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import argparse
from argparse import RawTextHelpFormatter

import h5py
import numpy as np


def str2bool(v):
    return v.lower() in ("yes", "true", "t", "1")


description = ("Subsampling hdf5 image stack")
parser = argparse.ArgumentParser(description=description,
                                 formatter_class=RawTextHelpFormatter)
parser.register('type', 'bool', str2bool)

# Input stack
parser.add_argument('fn_stack', type=str, default=None,
                    help='Enter hdf5 image stack file to be subsampled')
# Input dataset tree path
parser.add_argument(
    '-d', '--dataset', type=str, default='NXtomo/data/data',
    help='1&2. Dataset Path in input files (default=Tomo/data)')
# Subsampling level (losing resolution but reducing processing time)                      
parser.add_argument(
    '-l', '--level_downsample', type=int, default=1, 
    help="1&2. Subsampling level\n"
         + "(default: 1)")
# Transpose stacks
parser.add_argument(
    '-t', '--transpose', type="bool", default="False", 
    help="Transpose images\n"
         + "(default: False)")

args = parser.parse_args()
fn_stack = args.fn_stack
ds = args.dataset
level_downsample = args.level_downsample

print("Dataset to look at for finding projections in input hdf5 files:")
print(ds)

print("\nReading input stack")
h5_file = h5py.File(fn_stack, 'r')
prj =h5_file[ds].value

print("\nShape of input stack")
print(np.shape(prj))

##Subsampling input images ##
if level_downsample:
    import tomopy
    prjsub = tomopy.downsample(prj, level=level_downsample, axis=1).copy()
    prjsub = tomopy.downsample(prjsub, level=level_downsample, axis=2).copy()
else:
    prjsub = prj
######

# Shapes after downsampling
print("\nShape of downsampled stack")
print(np.shape(prjsub))                                                  
[nFrames, numcols, numrows] = np.shape(prjsub)

out_fn = fn_stack.rsplit('.', 1)[0] + '_downsampled.hdf5'
out = h5py.File(out_fn, 'w')
grp_top = out.create_group("NXtomo")
grp = grp_top.create_group("data")
grp.create_dataset(
    "data",
    shape=(nFrames, numrows, numcols),
    chunks=(1, numrows, numcols),
    dtype='float32')
for numimg in range(nFrames):
    if args.transpose:
        t_img = np.transpose(prjsub[numimg])
    else:
        t_img = prjsub[numimg]
    grp['data'][numimg] = t_img

out.close()
h5_file.close()

